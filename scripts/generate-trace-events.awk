#!/usr/bin/gawk -f

#
# This script takes one line trace event specifications and turns them
# into the boilerplate that connects each trace event call site with the
# backend tracing mechanism.
#
# The presented interface follows the kernel's TRACE_EVENT defintions in
# the form of trace_ngnfs_#foo
#
# describe userspace
#
# The event specification is of the form:
#
# 	NAME (lavel fmt)+
#
# where "str" is the string to be associated with each argument
# and fmt is a simplified printf fmt.  This simplified format doesn't
# have the % and allows a few width and output radix specifiers.
#
# for example:
#
#	some_event id llu type d 
#	other length x width u
#
# todo:
#  - structs?
#  - fixed width hex output?
#  - strings?
# 

BEGIN {
	fmt_types["lld"]="u64"
	fmt_types["llu"]="u64"
	fmt_types["llx"]="u64"
	fmt_types["d"]="u32"
	fmt_types["u"]="u32"
	fmt_types["x"]="u32"

	print	"/*\n"									\
		" * This is output that is generated by scripts from descriptions\n"	\
		" * of trace events.  Any modifications to this file will be lost.\n"	\
		" */\n"
}

(NF < 3) {
	print "line " NR " has " NF " fields, must have >= 3" > "/dev/stderr"
	exit 1
}

((NF % 2) == 0) {
	print "line " NR " has " NF " fields, must be odd (name + arg/fmt pairs)" > "/dev/stderr"
	exit 1
}

# name (label fmt)+
{
	name=$1
#	print name

	if (name_line[name]) {
		print "line " NR " has duplicate name \"" name "\" previously found on line " name_line[name]
		exit 1
	}
	name_line[name]=NR

	id++
	space=""
	comma=""
	newline=""
	args=""
	fields=""
	assign=""
	pf_fmt=""
	pf_args=""
	for (i = 2; i <= NF; i += 2) {
		nr = i / 2
		str = $i
		fmt = $(i+1)
		type = fmt_types[fmt]
		arg = "a" nr

		# arguments
		args = (args comma type " " arg)

		# struct fields
		struct = "struct trace_ngnfs_" name "_event"
		fields = (fields newline "  " type " " arg ";")

		# assignment
		assign = (assign newline "    ev->" arg " = " arg ";")
#		print assign

		# printf format
		pf_fmt = (pf_fmt space str " %" fmt)
#		print pf_fmt

		# printf args
		pf_args = (pf_args comma "ev->" arg)

		space=" "
		comma=", "
		newline="\n"
	}

	print struct " {\n"							\
		   fields "\n"							\
		"};\n"

	print "static inline void trace_ngnfs_" name "(" args ")\n"		\
		"{\n"								\
		"  " struct " *ev;\n"						\
		"  trace_store_begin();\n"					\
		"  ev = trace_store_ptr(" id ", sizeof(" struct "));\n"		\
		"  if (ev) {\n"							\
		     assign "\n"						\
		"  }\n"								\
		"  trace_store_end();\n"					\
		"}\n"

	print_cases = (print_cases "  case " id ":\n"				\
		"    { " struct " *ev = ptr;\n"					\
		"      printf(\"" pf_fmt "\\n\", " pf_args ");\n"		\
		"      break; }\n")
}
END { 
	print "static inline void print_trace_event(u16 id, void *ptr)\n"	\
		"{\n"								\
		"  switch(id) {\n"						\
		     print_cases						\
		"  }\n"								\
		"}\n"
}
